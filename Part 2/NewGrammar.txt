 [1]	<Program>	-> begin <Code> end
 [2]	<Code>		-> Epsilon
 [3]			-> <InstList>
 [4]	<InstList>	-> <Instruction> <NextInst>
 [5]	<NextInst>	-> Epsilon
 [6]			-> ; <InstList>
 [7]	<Instruction>	-> <Assign>
 [8]			-> <If>
 [9]			-> <While>
[10]			-> <For>
[11]			-> <Print>
[12]			-> <Read>
[13]	<Assign>	-> [VarName] := <ExprArith>
[14]	<ExprArith>	-> <Term> <ExprArith2>
[15]	<ExprArith2>	-> <TermOp> <Term> <ExprArith2>
[16]			-> Epsilon
[17]	<Term>		-> <Factor> <Term2>
[18]	<Term2>		-> <FactorOp> <Factor> <Term2>
[19]			-> Epsilon
[20]	<Factor>	-> (<ExprArith>)
[21]			-> - <ExprArith>
[22]			-> [VarName]
[23]			-> [Number]
[24]	<TermOp>	-> +
[25]			-> -
[26]	<FactorOp>	-> *
[27]			-> /
[28]	<If>		-> if <Cond> then <Code> <EndIf>
[29]	<EndIf>		-> fi
[30]			-> else <Code> fi
[31]	<Cond>		-> <AndCond> <Cond2>
[32]	<Cond2>		-> or <AndCond> <Cond2>
[33]			-> Epsilon
[34]	<AndCond>	-> <CondTerm> <AndCond2>
[35]	<AndCond2>	-> and <CondTerm> <AndCond2>
[36]			-> Epsilon
[37]	<CondTerm>	-> <SimpleCond>
[38]			-> not <SimpleCond>
[39]	<SimpleCond>	-> <ExprArith> <Comp> <ExprArith>
[40]	<Comp>		-> =
[41]			-> >=
[42]			-> >
[43]			-> <=
[44]			-> <
[45]			-> /=
[46]	<While>		-> while <Cond> do <Code> od
[47]	<For>		-> for [VarName] from <ExprArith> by <ExprArith> to
				<ExprArith> do <Code> od
[48]	<Print>		-> print([VarName])
[49]	<Read>		-> read([VarName])


NOTE : Il faut encore supprimer les left-Recursion



Modification <InstList> ( factorisation )

<InstList>	-> <Instruction><NextInst>
<NextInst>	-> Epsilon
		-> <InstList>

Modification <If> (Factorisation)

<If>		-> if <Cond> then <Code> <EndIf>
<EndIf>		-> fi
		-> else <Code> fi

Modification <Cond> (Ordre de priorité et association ) ( note : Trouver mieux que
								CondTerm ? )
<Cond> 		-> <Cond> or <AndCond>
		-> <CondTerm>
		-> <AndCond>
<AndCond>	-> <AndCond> and <CondTerm>
		-> <CondTerm>
<CondTerm>	-> <SimpleCond>
		-> not <SimpleCond>

Modification <ExprArith> (Ordre de priorité et association )

(Suppression <Op>)
<ExprArith>	-> <ExprArith> <TermOp> <Term>
		-> <Term>
<Term>		-> <Term> <FactorOp> <Factor>
		-> <Factor>
<Factor>	-> (<ExprArith>)
		-> - <ExprArith>
		-> [VarName]
		-> [Number]
<TermOp>	-> +
		-> -
<FactorOp>	-> *
		-> /



###### TRY WAROU SANS RECCURSION #######

Modification <Cond> (Ordre de priorité et association ) 


### MODIF post hadri ###

<Cond> 	-> <CondTerm> <AndCondFollow> <OrCondFollow>
<AndCondFollow> -> and <CondTerm> <AndCondFollow>
				-> ε
<OrCondFollow> -> or <Cond>
				-> ε

<CondTerm>	-> <SimpleCond>
		-> not <SimpleCond>






<Cond> 	-> <CondFollow> or <Cond>
		-> <CondFollow>

<CondFollow> -> <Cond> and <CondTerm>
			-> <CondTerm>

<CondTerm>	-> <SimpleCond>
		-> not <SimpleCond>



<Cond> 	-> <CondTerm> <CondFollow>

<CondFollow> -> and <Cond>
			-> ε

<CondTerm>	-> <SimpleCond>
		-> not <SimpleCond>





Modification <ExprArith> (Ordre de priorité et association )

(Suppression <Op>)

<ExprArith>	-> <Term> <TermFollow>
<TermFollow> -> <TermOp> <Term> <TermFollow>
			 -> ε

<Term>		-> <Factor> <FactorFollow>
<FactorFollow>  -> <FactorOp> <Factor> <FactorFollow>
				-> <Factor> <FactorFollow>
				-> ε

<Factor>	-> (<ExprArith>)
		-> - <ExprArith>
		-> [VarName]
		-> [Number]
<TermOp>	-> +
		-> -
<FactorOp>	-> *
		-> /
